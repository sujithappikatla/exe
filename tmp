// WhiteboardScreen.kt
package com.example.whiteboardapp

import androidx.compose.foundation.Canvas
import androidx.compose.foundation.background
import androidx.compose.foundation.gestures.detectDragGestures
import androidx.compose.foundation.layout.*
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.Icon
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Path
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.dp

@Composable
fun WhiteboardScreen(viewModel: WhiteboardViewModel) {
    val currentTool by viewModel.currentTool.collectAsState()
    val currentColor by viewModel.currentColor.collectAsState()
    val currentWidth by viewModel.currentWidth.collectAsState()
    val canvasBackgroundColor by viewModel.canvasBackgroundColor.collectAsState()
    val currentPage by viewModel.currentPage.collectAsState()
    val pages by viewModel.pages.collectAsState()

    var path by remember { mutableStateOf(Path()) }
    var lastTouchPoint by remember { mutableStateOf<Offset?>(null) }

    Box(modifier = Modifier.fillMaxSize()) {
        Canvas(
            modifier = Modifier
                .fillMaxSize()
                .background(canvasBackgroundColor)
                .pointerInput(currentTool, currentColor, currentWidth) {
                    detectDragGestures(
                        onDragStart = { touchPoint ->
                            path = Path().apply { moveTo(touchPoint.x, touchPoint.y) }
                            lastTouchPoint = touchPoint
                        },
                        onDrag = { change, _ ->
                            val newPoint = change.position
                            lastTouchPoint?.let { lastPoint ->
                                path.quadraticBezierTo(
                                    lastPoint.x,
                                    lastPoint.y,
                                    (newPoint.x + lastPoint.x) / 2,
                                    (newPoint.y + lastPoint.y) / 2
                                )
                            }
                            lastTouchPoint = newPoint
                            viewModel.addPathToCurrentPage(
                                DrawingPathData(
                                    path = path,
                                    color = currentColor,
                                    width = currentWidth,
                                    tool = currentTool
                                )
                            )
                        },
                        onDragEnd = {
                            lastTouchPoint = null
                        }
                    )
                }
        ) {
            pages[currentPage].forEach { pathData ->
                drawPath(
                    path = pathData.path,
                    color = pathData.color,
                    alpha = if (pathData.tool == DrawingTool.Brush) 0.3f else 1f,
                    style = androidx.compose.ui.graphics.drawscope.Stroke(width = pathData.width)
                )
            }
        }

        ToolbarOverlay(
            modifier = Modifier
                .align(Alignment.BottomCenter)
                .padding(bottom = 16.dp),
            viewModel = viewModel
        )
    }
}

@Composable
fun ToolbarOverlay(modifier: Modifier = Modifier, viewModel: WhiteboardViewModel) {
    Row(
        modifier = modifier,
        horizontalArrangement = Arrangement.spacedBy(8.dp)
    ) {
        ToolButton(
            icon = R.drawable.ic_pen,
            onClick = { viewModel.setTool(DrawingTool.Pen) }
        )
        ToolButton(
            icon = R.drawable.ic_brush,
            onClick = { viewModel.setTool(DrawingTool.Brush) }
        )
        ToolButton(
            icon = R.drawable.ic_eraser,
            onClick = { viewModel.setTool(DrawingTool.Eraser) }
        )
        ToolButton(
            icon = R.drawable.ic_undo,
            onClick = { viewModel.undo() }
        )
        ToolButton(
            icon = R.drawable.ic_color,
            onClick = { /* TODO: Implement color picker */ }
        )
        ToolButton(
            icon = R.drawable.ic_width,
            onClick = { /* TODO: Implement width picker */ }
        )
        ToolButton(
            icon = R.drawable.ic_new_page,
            onClick = { viewModel.addNewPage() }
        )
    }
}

@Composable
fun ToolButton(icon: Int, onClick: () -> Unit) {
    FloatingActionButton(
        onClick = onClick,
        modifier = Modifier.size(48.dp)
    ) {
        Icon(painter = painterResource(id = icon), contentDescription = null)
    }
}