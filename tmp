// MainActivity.kt
package com.example.whiteboardapp

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.ui.Modifier
import androidx.lifecycle.viewmodel.compose.viewModel

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MaterialTheme {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    val viewModel: WhiteboardViewModel = viewModel()
                    WhiteboardScreen(viewModel)
                }
            }
        }
    }
}

// WhiteboardViewModel.kt
package com.example.whiteboardapp

import androidx.compose.ui.graphics.Color
import androidx.lifecycle.ViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow

class WhiteboardViewModel : ViewModel() {
    private val _currentTool = MutableStateFlow<DrawingTool>(DrawingTool.Pen)
    val currentTool = _currentTool.asStateFlow()

    private val _currentColor = MutableStateFlow(Color.Black)
    val currentColor = _currentColor.asStateFlow()

    private val _currentWidth = MutableStateFlow(5f)
    val currentWidth = _currentWidth.asStateFlow()

    private val _canvasBackgroundColor = MutableStateFlow(Color.White)
    val canvasBackgroundColor = _canvasBackgroundColor.asStateFlow()

    private val _currentPage = MutableStateFlow(0)
    val currentPage = _currentPage.asStateFlow()

    private val _pages = MutableStateFlow(listOf(mutableListOf<DrawingPathData>()))
    val pages = _pages.asStateFlow()

    fun setTool(tool: DrawingTool) {
        _currentTool.value = tool
    }

    fun setColor(color: Color) {
        _currentColor.value = color
    }

    fun setWidth(width: Float) {
        _currentWidth.value = width
    }

    fun setCanvasBackgroundColor(color: Color) {
        _canvasBackgroundColor.value = color
    }

    fun addPathToCurrentPage(path: DrawingPathData) {
        val currentPagePaths = _pages.value[_currentPage.value].toMutableList()
        currentPagePaths.add(path)
        val updatedPages = _pages.value.toMutableList()
        updatedPages[_currentPage.value] = currentPagePaths
        _pages.value = updatedPages
    }

    fun undo() {
        val currentPagePaths = _pages.value[_currentPage.value].toMutableList()
        if (currentPagePaths.isNotEmpty()) {
            currentPagePaths.removeAt(currentPagePaths.lastIndex)
            val updatedPages = _pages.value.toMutableList()
            updatedPages[_currentPage.value] = currentPagePaths
            _pages.value = updatedPages
        }
    }

    fun clearCurrentPage() {
        val updatedPages = _pages.value.toMutableList()
        updatedPages[_currentPage.value] = mutableListOf()
        _pages.value = updatedPages
    }

    fun addNewPage() {
        val updatedPages = _pages.value.toMutableList()
        updatedPages.add(mutableListOf())
        _pages.value = updatedPages
        _currentPage.value = updatedPages.lastIndex
    }

    fun navigateToPage(pageIndex: Int) {
        if (pageIndex in 0 until _pages.value.size) {
            _currentPage.value = pageIndex
        }
    }
}

// DrawingTool.kt
package com.example.whiteboardapp

enum class DrawingTool {
    Pen,
    Brush,
    Eraser
}

// DrawingPathData.kt
package com.example.whiteboardapp

import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.Path

data class DrawingPathData(
    val path: Path,
    val color: Color,
    val width: Float,
    val tool: DrawingTool
)