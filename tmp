// WhiteboardViewModel.kt (updated)
package com.example.whiteboardapp

import android.content.Context
import android.graphics.Bitmap
import android.graphics.Canvas
import android.net.Uri
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.Path
import androidx.compose.ui.graphics.asAndroidPath
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import java.io.File
import java.io.FileOutputStream

class WhiteboardViewModel : ViewModel() {
    // ... (previous code remains the same)

    fun exportDrawing(context: Context, onComplete: (Uri?) -> Unit) {
        viewModelScope.launch(Dispatchers.IO) {
            val bitmap = Bitmap.createBitmap(1080, 1920, Bitmap.Config.ARGB_8888)
            val canvas = Canvas(bitmap)

            // Set background color
            canvas.drawColor(canvasBackgroundColor.value.toArgb())

            // Draw all paths
            val paint = android.graphics.Paint().apply {
                isAntiAlias = true
                isDither = true
            }

            pages.value[currentPage.value].forEach { pathData ->
                paint.color = pathData.color.toArgb()
                paint.strokeWidth = pathData.width
                paint.style = when (pathData.tool) {
                    DrawingTool.Pen -> android.graphics.Paint.Style.STROKE
                    DrawingTool.Brush -> {
                        paint.alpha = 77 // ~30% opacity
                        android.graphics.Paint.Style.STROKE
                    }
                    DrawingTool.Eraser -> android.graphics.Paint.Style.STROKE // Eraser not needed here
                }
                canvas.drawPath(pathData.path.asAndroidPath(), paint)
            }

            // Save bitmap to file
            val fileName = "whiteboard_export_${System.currentTimeMillis()}.png"
            val file = File(context.externalCacheDir, fileName)
            try {
                FileOutputStream(file).use { out ->
                    bitmap.compress(Bitmap.CompressFormat.PNG, 100, out)
                }
                onComplete(Uri.fromFile(file))
            } catch (e: Exception) {
                e.printStackTrace()
                onComplete(null)
            }
        }
    }

    // ... (rest of the code remains the same)
}