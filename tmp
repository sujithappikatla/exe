import android.os.Bundle
import android.util.Log
import android.webkit.*
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.compose.ui.viewinterop.AndroidView

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MaterialTheme {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    WebViewScreen()
                }
            }
        }
    }
}

@Composable
fun WebViewScreen() {
    val url = "https://lens.google.com/uploadbyurl?url=https%3A%2F%2Ftmpfiles.org%2Fdl%2F9543461%2Fmagical-spring-forest-scenery-during-morning-breeze-picjumbo-com.jpg"
    var isLoading by remember { mutableStateOf(true) }
    var errorMessage by remember { mutableStateOf<String?>(null) }

    Box(modifier = Modifier.fillMaxSize()) {
        AndroidView(
            factory = { context ->
                WebView(context).apply {
                    settings.javaScriptEnabled = true
                    settings.userAgentString = getCustomUserAgent(context)
                    webViewClient = object : WebViewClient() {
                        override fun onPageStarted(view: WebView?, url: String?, favicon: Bitmap?) {
                            isLoading = true
                            errorMessage = null
                        }

                        override fun onPageFinished(view: WebView?, url: String?) {
                            isLoading = false
                        }

                        override fun onReceivedError(view: WebView?, request: WebResourceRequest?, error: WebResourceError?) {
                            isLoading = false
                            errorMessage = "Error: ${error?.description}"
                            Log.e("WebView", "Error loading ${request?.url}: ${error?.description}")
                        }
                    }
                    webChromeClient = object : WebChromeClient() {
                        override fun onConsoleMessage(consoleMessage: ConsoleMessage?): Boolean {
                            Log.d("WebView", "${consoleMessage?.message()} -- From line ${consoleMessage?.lineNumber()} of ${consoleMessage?.sourceId()}")
                            return true
                        }
                    }
                    loadUrl(url, getCustomHeaders())
                }
            },
            modifier = Modifier.fillMaxSize()
        )

        if (isLoading) {
            CircularProgressIndicator(
                modifier = Modifier.align(Alignment.Center)
            )
        }

        errorMessage?.let {
            Text(
                text = it,
                color = MaterialTheme.colorScheme.error,
                modifier = Modifier.align(Alignment.Center).padding(16.dp)
            )
        }
    }
}

fun getCustomUserAgent(context: Context): String {
    val defaultUserAgent = WebSettings.getDefaultUserAgent(context)
    val displayMetrics = context.resources.displayMetrics
    val screenSizeInches = Math.sqrt(
        (displayMetrics.widthPixels / displayMetrics.xdpi).toDouble().pow(2.0) +
        (displayMetrics.heightPixels / displayMetrics.ydpi).toDouble().pow(2.0)
    )
    return "$defaultUserAgent LargeDisplay/${screenSizeInches.toInt()}inch"
}

fun getCustomHeaders(): Map<String, String> {
    return mapOf(
        "sec-ch-ua" to "\"Opera\";v=\"111\", \"Chromium\";v=\"125\", \"Not.A/Brand\";v=\"24\"",
        "sec-ch-ua-mobile" to "?0",
        "sec-ch-ua-arch" to "\"x86\"",
        "sec-ch-ua-form-factors" to "\"Desktop\"",
        "sec-ch-ua-full-version" to "\"111.0.5168.61\"",
        "sec-ch-ua-platform-version" to "\"15.0.0\"",
        "Referer" to "https://lens.google.com/",
        "sec-ch-ua-full-version-list" to "\"Opera\";v=\"111.0.5168.61\", \"Chromium\";v=\"125.0.6422.143\", \"Not.A/Brand\";v=\"24.0.0.0\"",
        "sec-ch-ua-bitness" to "\"64\"",
        "sec-ch-ua-model" to "\"\"",
        "sec-ch-ua-wow64" to "?0",
        "sec-ch-ua-platform" to "\"Windows\""
    )
}