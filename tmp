import android.Manifest
import android.content.Context
import android.content.pm.PackageManager
import android.os.Build
import android.os.Bundle
import android.telephony.TelephonyManager
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.core.app.ActivityCompat

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            DeviceInfoTheme {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    DeviceInfoApp()
                }
            }
        }
    }
}

@Composable
fun DeviceInfoApp() {
    val context = LocalContext.current
    
    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("DeviceInfo") },
                colors = TopAppBarDefaults.smallTopAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer,
                    titleContentColor = MaterialTheme.colorScheme.onPrimaryContainer,
                )
            )
        }
    ) { innerPadding ->
        LazyColumn(
            modifier = Modifier
                .fillMaxSize()
                .padding(innerPadding)
                .padding(16.dp)
        ) {
            item { InfoSection("Device", getDeviceInfo(context)) }
            item { InfoSection("Display", getDisplayInfo(context)) }
            item { InfoSection("System", getSystemInfo()) }
            item { InfoSection("Network", getNetworkInfo(context)) }
            item { InfoSection("Battery", getBatteryInfo(context)) }
            item { InfoSection("Storage", getStorageInfo(context)) }
            item { InfoSection("Sensors", getSensorInfo(context)) }
        }
    }
}

@Composable
fun InfoSection(title: String, items: List<Pair<String, String>>) {
    Column(modifier = Modifier.padding(vertical = 8.dp)) {
        Text(
            text = title,
            style = MaterialTheme.typography.titleLarge,
            fontWeight = FontWeight.Bold,
            color = MaterialTheme.colorScheme.primary
        )
        Spacer(modifier = Modifier.height(8.dp))
        items.forEach { (key, value) ->
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 4.dp)
            ) {
                Text(
                    text = key,
                    modifier = Modifier.weight(1f),
                    style = MaterialTheme.typography.bodyMedium,
                    fontWeight = FontWeight.Medium
                )
                Text(
                    text = value,
                    modifier = Modifier.weight(1f),
                    style = MaterialTheme.typography.bodyMedium
                )
            }
        }
    }
}

// Helper functions to get device information
fun getDeviceInfo(context: Context): List<Pair<String, String>> {
    return listOf(
        "Manufacturer" to Build.MANUFACTURER,
        "Model" to Build.MODEL,
        "Android Version" to Build.VERSION.RELEASE,
        "API Level" to Build.VERSION.SDK_INT.toString(),
        "Build Number" to Build.DISPLAY
    )
}

fun getDisplayInfo(context: Context): List<Pair<String, String>> {
    val displayMetrics = context.resources.displayMetrics
    return listOf(
        "Resolution" to "${displayMetrics.widthPixels} x ${displayMetrics.heightPixels}",
        "Density" to "${displayMetrics.densityDpi} dpi",
        "Refresh Rate" to "${context.display?.refreshRate?.toInt()} Hz"
    )
}

fun getSystemInfo(): List<Pair<String, String>> {
    return listOf(
        "CPU" to Build.HARDWARE,
        "Cores" to Runtime.getRuntime().availableProcessors().toString(),
        "RAM" to "${Runtime.getRuntime().totalMemory() / 1024 / 1024} MB"
    )
}

fun getNetworkInfo(context: Context): List<Pair<String, String>> {
    val telephonyManager = context.getSystemService(Context.TELEPHONY_SERVICE) as TelephonyManager
    return listOf(
        "Network Type" to when {
            Build.VERSION.SDK_INT >= Build.VERSION_CODES.N -> telephonyManager.dataNetworkType.toString()
            else -> telephonyManager.networkType.toString()
        },
        "SIM Operator" to telephonyManager.simOperatorName
    )
}

fun getBatteryInfo(context: Context): List<Pair<String, String>> {
    // You'll need to implement battery info retrieval using BatteryManager
    return listOf(
        "Battery Level" to "Implement using BatteryManager",
        "Charging Status" to "Implement using BatteryManager"
    )
}

fun getStorageInfo(context: Context): List<Pair<String, String>> {
    val totalSpace = context.filesDir.totalSpace / (1024 * 1024 * 1024)
    val freeSpace = context.filesDir.freeSpace / (1024 * 1024 * 1024)
    return listOf(
        "Total Storage" to "$totalSpace GB",
        "Free Storage" to "$freeSpace GB"
    )
}

fun getSensorInfo(context: Context): List<Pair<String, String>> {
    val sensorManager = context.getSystemService(Context.SENSOR_SERVICE) as android.hardware.SensorManager
    val sensors = sensorManager.getSensorList(android.hardware.Sensor.TYPE_ALL)
    return sensors.take(5).map { sensor ->
        sensor.name to sensor.stringType
    }
}

@Composable
fun DeviceInfoTheme(content: @Composable () -> Unit) {
    MaterialTheme(
        colorScheme = darkColorScheme(),
        typography = Typography(),
        content = content
    )
}