// WhiteboardViewModel.kt (updated)
package com.example.whiteboardapp

import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.Path
import androidx.lifecycle.ViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow

class WhiteboardViewModel : ViewModel() {
    // ... (previous code remains the same)

    private val _undoStack = MutableStateFlow(listOf<List<DrawingPathData>>())
    private val _redoStack = MutableStateFlow(listOf<List<DrawingPathData>>())

    fun addPathToCurrentPage(path: DrawingPathData) {
        val currentPagePaths = _pages.value[_currentPage.value].toMutableList()
        currentPagePaths.add(path)
        updatePageContent(currentPagePaths)
        _redoStack.value = emptyList() // Clear redo stack when a new action is performed
    }

    fun undo() {
        val currentPagePaths = _pages.value[_currentPage.value]
        if (currentPagePaths.isNotEmpty()) {
            _undoStack.value = _undoStack.value + listOf(currentPagePaths)
            val updatedPaths = currentPagePaths.dropLast(1)
            updatePageContent(updatedPaths)
        }
    }

    fun redo() {
        if (_redoStack.value.isNotEmpty()) {
            val redoAction = _redoStack.value.last()
            _redoStack.value = _redoStack.value.dropLast(1)
            _undoStack.value = _undoStack.value + listOf(_pages.value[_currentPage.value])
            updatePageContent(redoAction)
        }
    }

    private fun updatePageContent(newContent: List<DrawingPathData>) {
        val updatedPages = _pages.value.toMutableList()
        updatedPages[_currentPage.value] = newContent
        _pages.value = updatedPages
    }

    // ... (rest of the code remains the same)
}